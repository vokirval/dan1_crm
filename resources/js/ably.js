import Ably from 'ably';
import { router } from '@inertiajs/vue3';
import axios from 'axios';
import { ref } from 'vue';

const ably = new Ably.Realtime({ 
    key: 'Hozm9A.XUnHEQ:1xrJkVWmc6HN1E5z2YRWmVV1CmTgPXmFbMGS99VhR6E', // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∫–ª—é—á ID, –Ω–µ –ø–æ–ª–Ω—ã–π –∫–ª—é—á!
    clientId: 'vue-client',
    autoConnect: true,
    echoMessages: false
});

const channel = ably.channels.get('orders');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
const lockedOrders = ref(new Set());

const fetchLockedOrders = async () => {
    try {
        lockedOrders.value = new Set();
        const response = await axios.get('/orders/locked');
        response.data.lockedOrders.forEach(orderId => addLockedOrder(orderId));
        console.log(lockedOrders.value);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    }
};

fetchLockedOrders();



const addLockedOrder = (orderId) => {
    lockedOrders.value = new Set([...lockedOrders.value, orderId]); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Set
};


// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–∫–∞–∑–∞
channel.subscribe('order.locked', (msg) => {
    console.log('üî• –ó–∞–∫–∞–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', msg.data);
    fetchLockedOrders();
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–∫–∞–∑–∞
channel.subscribe('order.unlocked', (msg) => {
    console.log('üîì –ó–∞–∫–∞–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', msg.data);
    fetchLockedOrders();
});




// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const unlockOrder = (orderId) => {
    if (!orderId) return;
    console.log(`üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ ${orderId}`);
    axios.post(`/orders/${orderId}/unlock`).catch(() => {});
};

// –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Inertia.js
router.on('navigate', () => {
    unlockOrder(window.currentLockedOrder);
    window.currentLockedOrder = null;
});

// –°–ª—É—à–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏
window.addEventListener('beforeunload', () => {
    unlockOrder(window.currentLockedOrder);
});



// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë
export { ably, channel, lockedOrders };
